plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.1'
}
apply plugin: 'os-package'
apply plugin: 'se.mtm.artifactory-rpm'

project.ext {
    dropwizardVersion = '0.8.1'
    rpmVersion = version - '-SNAPSHOT'
}

dependencies {
    compile 'io.dropwizard:dropwizard-core:' + dropwizardVersion
    compile 'io.dropwizard:dropwizard-assets:' + dropwizardVersion
    compile 'io.dropwizard:dropwizard-views-mustache:' + dropwizardVersion
    compile ('io.dropwizard:dropwizard-client:' + dropwizardVersion) {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    compile 'commons-io:commons-io:2.4'
    compile 'org.fusesource:sigar:1.6.4'

    testCompile project(':client')
    testCompile 'io.dropwizard:dropwizard-testing:' + dropwizardVersion
    testCompile 'org.seleniumhq.selenium:selenium-java:2.46.0'
}

sourceSets {
    acceptanceTest {
        java.srcDir file('src/acceptanceTest/java')
        resources.srcDir file('src/acceptanceTest/resources')
        compileClasspath += main.output + test.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }

    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += main.output + test.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task acceptanceTest(type: Test) {
    description = 'Runs the acceptance tests'
    group = 'verification'
    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath
    reports.junitXml.destination = "$buildDir/acceptanceTest-test-results"
    reports.html.destination = "$buildDir/reports/acceptanceTest"
    dependsOn(test)
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.junitXml.destination = "$buildDir/integrationTest-test-results"
    reports.html.destination = "$buildDir/reports/integrationTest"
    dependsOn(test)
}

check {
    dependsOn(integrationTest)
    dependsOn(acceptanceTest)
}

shadowJar {
    dependsOn 'build'
    mergeServiceFiles()
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    manifest {
        attributes 'Main-Class': 'se.mtm.speech.synthesis.Main',
                'Implementation-Version': version
    }
}

ospackage {
    packageName = 'speech-synthesis-server'
    version = rpmVersion
    release = (System.getenv().BUILD_NUMBER != null) ? System.getenv().BUILD_NUMBER : "0";
    os = LINUX
    user = "root"

    installUtils file('rpm/utils.sh')
    preInstall file('rpm/preInstall.sh')
    postInstall file('rpm/postInstall.sh')
    postUninstall file('rpm/postUninstall.sh')

    into '/opt/speech-synthesis-server'

    from('./build/libs') {
        fileMode = 0555
    }

    from('./src/scripts') {
        into('scripts')
        fileMode = 0644
    }

    link('/etc/init.d/speech-synthesis-server', 'scripts/speech-synthesis-server.sh')
}

buildRpm {
    it.dependsOn shadowJar
}

deployRpm {
    it.dependsOn buildRpm
}
